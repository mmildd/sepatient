/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersCoveredPerson,
    ControllersCoveredPersonFromJSON,
    ControllersCoveredPersonToJSON,
    EntCertificate,
    EntCertificateFromJSON,
    EntCertificateToJSON,
    EntCoveredPerson,
    EntCoveredPersonFromJSON,
    EntCoveredPersonToJSON,
    EntFund,
    EntFundFromJSON,
    EntFundToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntSchemeType,
    EntSchemeTypeFromJSON,
    EntSchemeTypeToJSON,
} from '../models';

export interface CreateCertificateRequest {
    certificate: EntCertificate;
}

export interface CreateCoveredpersonRequest {
    coveredperson: ControllersCoveredPerson;
}

export interface CreateFundRequest {
    fund: EntFund;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreateSchemeTypeRequest {
    schemeType: EntSchemeType;
}

export interface DeleteCertificateRequest {
    id: number;
}

export interface DeleteCoveredpersonRequest {
    id: number;
}

export interface DeleteFundRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeleteSchemeTypeRequest {
    id: number;
}

export interface GetCertificateRequest {
    id: number;
}

export interface GetCoveredpersonRequest {
    id: number;
}

export interface GetFundRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetSchemeTypeRequest {
    id: number;
}

export interface ListCertificateRequest {
    limit?: number;
    offset?: number;
}

export interface ListCoveredpersonRequest {
    limit?: number;
    offset?: number;
}

export interface ListFundRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListSchemeTypeRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateCertificateRequest {
    id: number;
    certificate: EntCertificate;
}

export interface UpdateCoveredpersonRequest {
    id: number;
    coveredperson: EntCoveredPerson;
}

export interface UpdateFundRequest {
    id: number;
    fund: EntFund;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

export interface UpdateSchemeTypeRequest {
    id: number;
    schemeType: EntSchemeType;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create certificate
     * Create certificate
     */
    async createCertificateRaw(requestParameters: CreateCertificateRequest): Promise<runtime.ApiResponse<EntCertificate>> {
        if (requestParameters.certificate === null || requestParameters.certificate === undefined) {
            throw new runtime.RequiredError('certificate','Required parameter requestParameters.certificate was null or undefined when calling createCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/certificates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCertificateToJSON(requestParameters.certificate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCertificateFromJSON(jsonValue));
    }

    /**
     * Create certificate
     * Create certificate
     */
    async createCertificate(requestParameters: CreateCertificateRequest): Promise<EntCertificate> {
        const response = await this.createCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create coveredperson
     * Create coveredperson
     */
    async createCoveredpersonRaw(requestParameters: CreateCoveredpersonRequest): Promise<runtime.ApiResponse<EntCoveredPerson>> {
        if (requestParameters.coveredperson === null || requestParameters.coveredperson === undefined) {
            throw new runtime.RequiredError('coveredperson','Required parameter requestParameters.coveredperson was null or undefined when calling createCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coveredpersons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCoveredPersonToJSON(requestParameters.coveredperson),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoveredPersonFromJSON(jsonValue));
    }

    /**
     * Create coveredperson
     * Create coveredperson
     */
    async createCoveredperson(requestParameters: CreateCoveredpersonRequest): Promise<EntCoveredPerson> {
        const response = await this.createCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create fund
     * Create fund
     */
    async createFundRaw(requestParameters: CreateFundRequest): Promise<runtime.ApiResponse<EntFund>> {
        if (requestParameters.fund === null || requestParameters.fund === undefined) {
            throw new runtime.RequiredError('fund','Required parameter requestParameters.fund was null or undefined when calling createFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/funds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFundToJSON(requestParameters.fund),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFundFromJSON(jsonValue));
    }

    /**
     * Create fund
     * Create fund
     */
    async createFund(requestParameters: CreateFundRequest): Promise<EntFund> {
        const response = await this.createFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create schemeType
     * Create schemeType
     */
    async createSchemeTypeRaw(requestParameters: CreateSchemeTypeRequest): Promise<runtime.ApiResponse<EntSchemeType>> {
        if (requestParameters.schemeType === null || requestParameters.schemeType === undefined) {
            throw new runtime.RequiredError('schemeType','Required parameter requestParameters.schemeType was null or undefined when calling createSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schemeTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSchemeTypeToJSON(requestParameters.schemeType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSchemeTypeFromJSON(jsonValue));
    }

    /**
     * Create schemeType
     * Create schemeType
     */
    async createSchemeType(requestParameters: CreateSchemeTypeRequest): Promise<EntSchemeType> {
        const response = await this.createSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get certificate by ID
     * Delete a certificate entity by ID
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get certificate by ID
     * Delete a certificate entity by ID
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest): Promise<object> {
        const response = await this.deleteCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coveredperson by ID
     * Delete a coveredperson entity by ID
     */
    async deleteCoveredpersonRaw(requestParameters: DeleteCoveredpersonRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coveredpersons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get coveredperson by ID
     * Delete a coveredperson entity by ID
     */
    async deleteCoveredperson(requestParameters: DeleteCoveredpersonRequest): Promise<object> {
        const response = await this.deleteCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fund by ID
     * Delete a fund entity by ID
     */
    async deleteFundRaw(requestParameters: DeleteFundRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get fund by ID
     * Delete a fund entity by ID
     */
    async deleteFund(requestParameters: DeleteFundRequest): Promise<object> {
        const response = await this.deleteFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get schemeType by ID
     * Delete a schemeType entity by ID
     */
    async deleteSchemeTypeRaw(requestParameters: DeleteSchemeTypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemeTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get schemeType by ID
     * Delete a schemeType entity by ID
     */
    async deleteSchemeType(requestParameters: DeleteSchemeTypeRequest): Promise<object> {
        const response = await this.deleteSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get certificate by ID
     * Get a certificate entity by ID
     */
    async getCertificateRaw(requestParameters: GetCertificateRequest): Promise<runtime.ApiResponse<EntCertificate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCertificateFromJSON(jsonValue));
    }

    /**
     * get certificate by ID
     * Get a certificate entity by ID
     */
    async getCertificate(requestParameters: GetCertificateRequest): Promise<EntCertificate> {
        const response = await this.getCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * get coveredperson by ID
     * Get a coveredperson entity by ID
     */
    async getCoveredpersonRaw(requestParameters: GetCoveredpersonRequest): Promise<runtime.ApiResponse<EntCoveredPerson>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coveredpersons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoveredPersonFromJSON(jsonValue));
    }

    /**
     * get coveredperson by ID
     * Get a coveredperson entity by ID
     */
    async getCoveredperson(requestParameters: GetCoveredpersonRequest): Promise<EntCoveredPerson> {
        const response = await this.getCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fund by ID
     * Get a fund entity by ID
     */
    async getFundRaw(requestParameters: GetFundRequest): Promise<runtime.ApiResponse<EntFund>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFundFromJSON(jsonValue));
    }

    /**
     * get fund by ID
     * Get a fund entity by ID
     */
    async getFund(requestParameters: GetFundRequest): Promise<EntFund> {
        const response = await this.getFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get schemeType by ID
     * Get a schemeType entity by ID
     */
    async getSchemeTypeRaw(requestParameters: GetSchemeTypeRequest): Promise<runtime.ApiResponse<EntSchemeType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemeTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSchemeTypeFromJSON(jsonValue));
    }

    /**
     * get schemeType by ID
     * Get a schemeType entity by ID
     */
    async getSchemeType(requestParameters: GetSchemeTypeRequest): Promise<EntSchemeType> {
        const response = await this.getSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list certificate entities
     * List certificate entities
     */
    async listCertificateRaw(requestParameters: ListCertificateRequest): Promise<runtime.ApiResponse<Array<EntCertificate>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/certificates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCertificateFromJSON));
    }

    /**
     * list certificate entities
     * List certificate entities
     */
    async listCertificate(requestParameters: ListCertificateRequest): Promise<Array<EntCertificate>> {
        const response = await this.listCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * list coveredperson entities
     * List coveredperson entities
     */
    async listCoveredpersonRaw(requestParameters: ListCoveredpersonRequest): Promise<runtime.ApiResponse<Array<EntCoveredPerson>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coveredpersons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCoveredPersonFromJSON));
    }

    /**
     * list coveredperson entities
     * List coveredperson entities
     */
    async listCoveredperson(requestParameters: ListCoveredpersonRequest): Promise<Array<EntCoveredPerson>> {
        const response = await this.listCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * list fund entities
     * List fund entities
     */
    async listFundRaw(requestParameters: ListFundRequest): Promise<runtime.ApiResponse<Array<EntFund>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFundFromJSON));
    }

    /**
     * list fund entities
     * List fund entities
     */
    async listFund(requestParameters: ListFundRequest): Promise<Array<EntFund>> {
        const response = await this.listFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list schemeType entities
     * List schemeType entities
     */
    async listSchemeTypeRaw(requestParameters: ListSchemeTypeRequest): Promise<runtime.ApiResponse<Array<EntSchemeType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemeTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSchemeTypeFromJSON));
    }

    /**
     * list schemeType entities
     * List schemeType entities
     */
    async listSchemeType(requestParameters: ListSchemeTypeRequest): Promise<Array<EntSchemeType>> {
        const response = await this.listSchemeTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update certificate by ID
     * Update a certificate entity by ID
     */
    async updateCertificateRaw(requestParameters: UpdateCertificateRequest): Promise<runtime.ApiResponse<EntCertificate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCertificate.');
        }

        if (requestParameters.certificate === null || requestParameters.certificate === undefined) {
            throw new runtime.RequiredError('certificate','Required parameter requestParameters.certificate was null or undefined when calling updateCertificate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/certificates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCertificateToJSON(requestParameters.certificate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCertificateFromJSON(jsonValue));
    }

    /**
     * update certificate by ID
     * Update a certificate entity by ID
     */
    async updateCertificate(requestParameters: UpdateCertificateRequest): Promise<EntCertificate> {
        const response = await this.updateCertificateRaw(requestParameters);
        return await response.value();
    }

    /**
     * update coveredperson by ID
     * Update a coveredperson entity by ID
     */
    async updateCoveredpersonRaw(requestParameters: UpdateCoveredpersonRequest): Promise<runtime.ApiResponse<EntCoveredPerson>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCoveredperson.');
        }

        if (requestParameters.coveredperson === null || requestParameters.coveredperson === undefined) {
            throw new runtime.RequiredError('coveredperson','Required parameter requestParameters.coveredperson was null or undefined when calling updateCoveredperson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coveredpersons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCoveredPersonToJSON(requestParameters.coveredperson),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCoveredPersonFromJSON(jsonValue));
    }

    /**
     * update coveredperson by ID
     * Update a coveredperson entity by ID
     */
    async updateCoveredperson(requestParameters: UpdateCoveredpersonRequest): Promise<EntCoveredPerson> {
        const response = await this.updateCoveredpersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * update fund by ID
     * Update a fund entity by ID
     */
    async updateFundRaw(requestParameters: UpdateFundRequest): Promise<runtime.ApiResponse<EntFund>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFund.');
        }

        if (requestParameters.fund === null || requestParameters.fund === undefined) {
            throw new runtime.RequiredError('fund','Required parameter requestParameters.fund was null or undefined when calling updateFund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/funds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntFundToJSON(requestParameters.fund),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFundFromJSON(jsonValue));
    }

    /**
     * update fund by ID
     * Update a fund entity by ID
     */
    async updateFund(requestParameters: UpdateFundRequest): Promise<EntFund> {
        const response = await this.updateFundRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update schemeType by ID
     * Update a schemeType entity by ID
     */
    async updateSchemeTypeRaw(requestParameters: UpdateSchemeTypeRequest): Promise<runtime.ApiResponse<EntSchemeType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSchemeType.');
        }

        if (requestParameters.schemeType === null || requestParameters.schemeType === undefined) {
            throw new runtime.RequiredError('schemeType','Required parameter requestParameters.schemeType was null or undefined when calling updateSchemeType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schemeTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSchemeTypeToJSON(requestParameters.schemeType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSchemeTypeFromJSON(jsonValue));
    }

    /**
     * update schemeType by ID
     * Update a schemeType entity by ID
     */
    async updateSchemeType(requestParameters: UpdateSchemeTypeRequest): Promise<EntSchemeType> {
        const response = await this.updateSchemeTypeRaw(requestParameters);
        return await response.value();
    }

}
